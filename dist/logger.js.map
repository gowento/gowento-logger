{"version":3,"sources":["../src/logger.js"],"names":["centerTruncate","str","strLen","separator","fullStr","toString","length","sepLen","charsToShow","frontChars","Math","ceil","backChars","floor","substr","stringify","object","truncateValues","lineElements","forEach","value","key","stringifiedValue","isNil","isPlainObject","push","join","logObject","console","log","data"],"mappings":";;;;;;AAAA;;;;;;AAEA,SAASA,cAAT,CAAwBC,GAAxB,EAA8D;AAAA,MAAjCC,MAAiC,uEAAxB,GAAwB;AAAA,MAAnBC,SAAmB,uEAAP,KAAO;;AAC5D,MAAI,CAACF,GAAL,EAAU;AACR,WAAO,IAAP;AACD;;AAED,MAAMG,UAAUH,IAAII,QAAJ,EAAhB;;AAEA,MAAID,QAAQE,MAAR,IAAkBJ,MAAtB,EAA8B;AAC5B,WAAOE,OAAP;AACD;;AAED,MAAMG,SAASJ,UAAUG,MAAzB;AACA,MAAME,cAAcN,SAASK,MAA7B;AACA,MAAME,aAAaC,KAAKC,IAAL,CAAUH,cAAc,CAAxB,CAAnB;AACA,MAAMI,YAAYF,KAAKG,KAAL,CAAWL,cAAc,CAAzB,CAAlB;;AAEA,SAAOJ,QAAQU,MAAR,CAAe,CAAf,EAAkBL,UAAlB,IACHN,SADG,GAEHC,QAAQU,MAAR,CAAeV,QAAQE,MAAR,GAAiBM,SAAhC,CAFJ;AAGD;;AAED;;;AAGA,SAASG,SAAT,CAAmBC,MAAnB,EAA4D;AAAA,iFAAJ,EAAI;AAAA,iCAA/BC,cAA+B;AAAA,MAA/BA,cAA+B,uCAAd,KAAc;;AAC1D,MAAMC,eAAe,EAArB;;AAEA,mBAAEC,OAAF,CAAUH,MAAV,EAAkB,UAACI,KAAD,EAAQC,GAAR,EAAgB;AAChC,QAAIC,yBAAJ;AACA,QAAI,iBAAEC,KAAF,CAAQH,KAAR,CAAJ,EAAoB;AAClBE,yBAAmB,EAAnB;AACD,KAFD,MAEO,IAAI,iBAAEE,aAAF,CAAgBJ,KAAhB,CAAJ,EAA4B;AACjCE,+BAAuBP,UAAUK,KAAV,EAAiB,EAAEH,gBAAgB,IAAlB,EAAjB,CAAvB;AACD,KAFM,MAEA;AACLK,yBAAmBL,iBAAiBjB,eAAeoB,MAAMf,QAAN,EAAf,CAAjB,GAAoDe,MAAMf,QAAN,EAAvE;AACD;;AAEDa,iBAAaO,IAAb,CAAqBJ,GAArB,SAA4BC,gBAA5B;AACD,GAXD;;AAaA,SAAOJ,aAAaQ,IAAb,CAAkB,GAAlB,CAAP;AACD;;AAED,SAASC,SAAT,CAAmBX,MAAnB,EAA2B;AACzBY,UAAQC,GAAR,CAAYd,UAAUC,MAAV,CAAZ;AACD;;AAED,SAASa,GAAT,CAAaC,IAAb,EAAmB;AACjB,MAAI,iBAAEN,aAAF,CAAgBM,IAAhB,CAAJ,EAA2B;AACzBH,cAAUG,IAAV;AACA;AACD;AACDF,UAAQC,GAAR,CAAYC,IAAZ;AACD;;kBAEc;AACbD,UADa;AAEbF,sBAFa;AAGbZ;AAHa,C","file":"logger.js","sourcesContent":["import _ from 'lodash';\n\nfunction centerTruncate(str, strLen = 125, separator = '...') {\n  if (!str) {\n    return null;\n  }\n\n  const fullStr = str.toString();\n\n  if (fullStr.length <= strLen) {\n    return fullStr;\n  }\n\n  const sepLen = separator.length;\n  const charsToShow = strLen - sepLen;\n  const frontChars = Math.ceil(charsToShow / 2);\n  const backChars = Math.floor(charsToShow / 2);\n\n  return fullStr.substr(0, frontChars)\n    + separator\n    + fullStr.substr(fullStr.length - backChars);\n}\n\n/**\n * logfmt-style stringify with support for sub objects\n */\nfunction stringify(object, { truncateValues = false } = {}) {\n  const lineElements = [];\n\n  _.forEach(object, (value, key) => {\n    let stringifiedValue;\n    if (_.isNil(value)) {\n      stringifiedValue = '';\n    } else if (_.isPlainObject(value)) {\n      stringifiedValue = `{${stringify(value, { truncateValues: true })}}`;\n    } else {\n      stringifiedValue = truncateValues ? centerTruncate(value.toString()) : value.toString();\n    }\n\n    lineElements.push(`${key}=${stringifiedValue}`);\n  });\n\n  return lineElements.join(' ');\n}\n\nfunction logObject(object) {\n  console.log(stringify(object));\n}\n\nfunction log(data) {\n  if (_.isPlainObject(data)) {\n    logObject(data);\n    return;\n  }\n  console.log(data);\n}\n\nexport default {\n  log,\n  logObject,\n  stringify,\n};\n"]}